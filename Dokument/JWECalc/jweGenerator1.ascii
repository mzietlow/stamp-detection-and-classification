import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import com.nimbusds.jose.*;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jwt.EncryptedJWT;
import com.nimbusds.jwt.JWTClaimsSet;

public class jweGenerator {

    public String buildEncryptedJWT(PublicKey publicKey) throws JOSEException {

    public String buildEncryptedCompactJWT(PublicKey publicKey) throws JOSEException {

        JWTClaimsSet jwtClaims = new JWTClaimsSet();
        jwtClaims.setCustomClaim("token","mytoken");
        jwtClaims.setExpirationTime(new Date(new Date().getTime()-600));
        Date currentTime = new Date();
        jwtClaims.setNotBeforeTime(currentTime);
        jwtClaims.setIssueTime(currentTime);
        jwtClaims.setJWTID(UUID.randomUUID().toString());

        JWEHeader jweHeader = new JWEHeader(JWEAlgorithm.RSA_OAEP, EncryptionMethod.A128GCM);
        JWEEncrypter encrypter = new RSAEncrypter((RSAPublicKey) publicKey);
        EncryptedJWT encryptedJWT = new EncryptedJWT(jweHeader, jwtClaims);
        encryptedJWT.encrypt(encrypter);

        String joseHeader = encryptedJWT.getHeader().toBase64URL().toString();
        String encKey = encryptedJWT.getEncryptedKey().toString();
        String initVect = encryptedJWT.getInitializationVector().toString();
        String ciph = encryptedJWT.getCipherText().toString();
        String tag = encryptedJWT.getIntegrityValue().toString();
        String jwtInText = joseHeader +"."+encKey+"."+initVect+"."+ciph+"." + tag;
        System.out.println(jwtInText);

        return jwtInText;
    }
}
